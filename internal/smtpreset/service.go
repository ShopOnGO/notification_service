package smtpreset

import (
	"fmt"
	"notification/internal/notifications"
	"notification/pkg/email"
	"notification/pkg/logger"
	"time"
)

type SMTPService struct {
	sender email.Sender
}

func NewSMTPService(sender email.Sender) *SMTPService {
	return &SMTPService{
		sender: sender,
	}
}

func (s *SMTPService) HandleResetNotification(n *notifications.Notification, key string) {
	if n.Category != "AUTHRESET" {
		logger.Error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + n.Category)
		return
	}

	if n.Subtype != "SEND_RESET_CODE" && n.Subtype != "RESET_CODE" {
		logger.Error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–¥—Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + n.Subtype)
		return
	}

	code, okCode := n.Payload["code"].(string)
	subject, okSubject := n.Payload["subject"].(string)
	expiresAtFloat, okExpiresAt := n.Payload["expiresAt"].(float64)
	payloadEmail, okEmail := n.Payload["email"].(string)

	if !okCode || !okSubject || !okExpiresAt || !okEmail {
		logger.Error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è AUTHRESET")
		return
	}

	expiresAt := int64(expiresAtFloat)
	ttl := expiresAt - time.Now().Unix()

	body := fmt.Sprintf("–í–∞—à –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: %s\n\n–û–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ %d —Å–µ–∫—É–Ω–¥.", code, ttl)

	emailInput := email.SendEmailInput{
		To:      payloadEmail,
		Subject: subject,
		Body:    body,
	}

	if err := s.sender.Send(emailInput); err != nil {
		logger.Error(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: %s", err.Error()))
		return
	}

	logger.Info("üì® Email —Å –∫–æ–¥–æ–º —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + payloadEmail)
}
