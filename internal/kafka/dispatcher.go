package kafka

import (
	"encoding/json"
	"log"
	"notification/internal/notifications"
)

type Dispatcher struct {
	handlers map[string]func(*notifications.Notification) // map –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
}

// NewDispatcher —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Dispatcher
func NewDispatcher() *Dispatcher {
	return &Dispatcher{
		handlers: make(map[string]func(*notifications.Notification)),
	}
}

// Register —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (d *Dispatcher) Register(cat string, fn func(*notifications.Notification)) {
	d.handlers[cat] = fn
}

// Dispatch –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
func (d *Dispatcher) Dispatch(msg []byte) {
	var n notifications.Notification
	if err := json.Unmarshal(msg, &n); err != nil {
		log.Printf("üö® Parse error: %v | Raw: %s", err, string(msg))
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
	if n.UserID == 0 || n.Category == "" {
		log.Printf("‚ö†Ô∏è Invalid notification: %+v", n)
		return
	}

	// –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	if handler, ok := d.handlers[n.Category]; ok {
		handler(&n) // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	} else {
		log.Printf("‚ö†Ô∏è No handler found for category: %s", n.Category)
	}
}
